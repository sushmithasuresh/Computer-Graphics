#include <GL/glut.h>  
 
void initGL() 
{
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
   glClearDepth(1.0f);                  
   //glEnable(GL_DEPTH_TEST);
}
 
void display() 
{
   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
   glMatrixMode(GL_MODELVIEW);    
 
   glLoadIdentity();                 // Reset the model-view matrix
   
   glTranslatef(1.5f, 0.0f, -7.0f);  // Move right and into the screen

   glBegin(GL_QUADS);        // Draw The Cube Using quads
	 glColor3f(0.0f,1.0f,0.0f);    // Color Blue
		 glVertex3f( 1.0f, 1.0f,-1.0f);    // Top Right Of The Quad (Top)
		 glVertex3f(-1.0f, 1.0f,-1.0f);    // Top Left Of The Quad (Top)
		 glVertex3f(-1.0f, 1.0f, 1.0f);    // Bottom Left Of The Quad (Top)
		 glVertex3f( 1.0f, 1.0f, 1.0f);    // Bottom Right Of The Quad (Top)
   
	 glColor3f(1.0f,0.5f,0.0f);    // Color Orange
		 glVertex3f( 1.0f,-1.0f, 1.0f);    // Top Right Of The Quad (Bottom)
		 glVertex3f(-1.0f,-1.0f, 1.0f);    // Top Left Of The Quad (Bottom)
		 glVertex3f(-1.0f,-1.0f,-1.0f);    // Bottom Left Of The Quad (Bottom)
		 glVertex3f( 1.0f,-1.0f,-1.0f);    // Bottom Right Of The Quad (Bottom)
	
	glColor3f(1.0f,0.0f,0.0f);    // Color Red    
		 glVertex3f( 1.0f, 1.0f, 1.0f);    // Top Right Of The Quad (Front)
		 glVertex3f(-1.0f, 1.0f, 1.0f);    // Top Left Of The Quad (Front)
		 glVertex3f(-1.0f,-1.0f, 1.0f);    // Bottom Left Of The Quad (Front)
		 glVertex3f( 1.0f,-1.0f, 1.0f);    // Bottom Right Of The Quad (Front)
    
	glColor3f(1.0f,1.0f,0.0f);    // Color Yellow
		 glVertex3f( 1.0f,-1.0f,-1.0f);    // Top Right Of The Quad (Back)
		 glVertex3f(-1.0f,-1.0f,-1.0f);    // Top Left Of The Quad (Back)
		 glVertex3f(-1.0f, 1.0f,-1.0f);    // Bottom Left Of The Quad (Back)
		 glVertex3f( 1.0f, 1.0f,-1.0f);    // Bottom Right Of The Quad (Back)
    
	glColor3f(0.0f,0.0f,1.0f);    // Color Blue
		 glVertex3f(-1.0f, 1.0f, 1.0f);    // Top Right Of The Quad (Left)
		 glVertex3f(-1.0f, 1.0f,-1.0f);    // Top Left Of The Quad (Left)
		 glVertex3f(-1.0f,-1.0f,-1.0f);    // Bottom Left Of The Quad (Left)
		 glVertex3f(-1.0f,-1.0f, 1.0f);    // Bottom Right Of The Quad (Left)
    
	glColor3f(1.0f,0.0f,1.0f);    // Color Violet
		 glVertex3f( 1.0f, 1.0f,-1.0f);    // Top Right Of The Quad (Right)
		 glVertex3f( 1.0f, 1.0f, 1.0f);    // Top Left Of The Quad (Right)
		 glVertex3f( 1.0f,-1.0f, 1.0f);    // Bottom Left Of The Quad (Right)
		 glVertex3f( 1.0f,-1.0f,-1.0f);    // Bottom Right Of The Quad (Right)
 
  glEnd();    
  
  glutSwapBuffers();  // Swap the front and back frame buffers (double buffering)
}
 
void reshape(GLsizei width, GLsizei height) 
{
	if (height == 0) height = 1;                // To prevent divide by 0
   GLfloat aspect = (GLfloat)width / (GLfloat)height;
   glViewport(0, 0, width, height);
   glMatrixMode(GL_PROJECTION);  
   glLoadIdentity();             
   gluPerspective(45.0f, aspect, 0.1f, 100.0f);
}
 
int main(int argc, char** argv) 
{
   glutInit(&argc, argv);            // Initialize GLUT
   glutInitDisplayMode(GLUT_DOUBLE); // Enable double buffered mode
   glutInitWindowSize(640, 480);   // Set the window's initial width & height
   glutInitWindowPosition(50, 50); // Position the window's initial top-left corner
   glutCreateWindow("Hidden Surface");          // Create window with the given title
   glutDisplayFunc(display);       // Register callback handler for window re-paint event
   glutReshapeFunc(reshape);       // Register callback handler for window re-size event
   initGL();                       // Our own OpenGL initialization
   glutMainLoop();                 // Enter the infinite event-processing loop
   return 0;
}
